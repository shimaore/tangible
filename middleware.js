// Generated by CoffeeScript 1.12.6
(function() {
  var Now, init, logger, non_call_logger, uuidV4;

  logger = require('./index');

  Now = function() {
    return new Date().toJSON();
  };

  this.name = "tangible";

  this.init = init = logger.init;

  non_call_logger = function(suffix) {
    var name, ref;
    name = (ref = this.__middleware_name) != null ? ref : '(no name)';
    if (suffix != null) {
      name += ":" + suffix;
    }
    return this.debug = logger(name);
  };

  this.config = function() {
    init(this.cfg);
    return non_call_logger.call(this, 'config');
  };

  this.server_pre = function() {
    init(this.cfg);
    return non_call_logger.call(this, 'server_pre');
  };

  this.web = function() {
    return non_call_logger.call(this, 'web');
  };

  this.notify = function(arg) {
    var socket;
    socket = arg.socket;
    socket.emit('register', {
      event: 'tangible:dev_logger',
      default_room: 'support'
    });
    socket.on('tangible:dev_logger', function(enabled) {
      return logger.set_dev_logger(enabled);
    });
    socket.emit('register', {
      event: 'tangible:enable',
      default_room: 'support'
    });
    socket.on('tangible:enable', function(namespaces) {
      return logger.enable(namespaces);
    });
    return non_call_logger.call(this, 'notify');
  };

  uuidV4 = require('uuid/v4');

  this.include = function() {
    var host, id, now, ref, uuid;
    now = Now();
    uuid = uuidV4();
    host = (ref = this.cfg.host) != null ? ref : logger.default_host;
    this.session.logger_stamp = now;
    this.session.logger_host = host;
    this.session.logger_uuid = uuid;
    id = [host, now, uuid].join('-');
    this.session._id = id;
    return this.debug = logger.call(this, null);
  };

}).call(this);
