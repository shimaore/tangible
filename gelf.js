// Generated by CoffeeScript 1.12.7
(function() {
  var Debug, debug, fs, gelf_config, k, map, n, plugin, request,
    hasProp = {}.hasOwnProperty;

  Debug = require('debug');

  request = require('superagent');

  debug = Debug('tangible:gelf');

  fs = require('fs');

  gelf_config = null;

  if (process.env.GELF_URL != null) {
    map = {
      key: 'GELF_KEY',
      cert: 'GELF_CERT',
      ca: 'GELF_CA'
    };
    gelf_config = {
      url: process.env.GELF_URL
    };
    for (k in map) {
      n = map[k];
      if (n in process.env) {
        gelf_config[k] = fs.readFileSync(process.env[n]);
      }
    }
  }

  module.exports = plugin = function(w) {
    var log, log_if;
    if (gelf_config == null) {
      return;
    }
    log = function(data) {
      var message, ref, v;
      message = {
        host: data.host,
        short_message: data.msg,
        facility: data.event,
        _stamp: data.stamp,
        _application_name: data.application
      };
      if (data.data != null) {
        message._data = data.data;
        if (typeof message._data === 'object' && (message._data.length == null)) {
          ref = message._data;
          for (k in ref) {
            if (!hasProp.call(ref, k)) continue;
            v = ref[k];
            if (k.match(/^[\w-]+$/)) {
              message["_" + k] = v;
            }
          }
        }
      }
      if (data.extra != null) {
        message._extra = data.extra;
      }
      if (data.session != null) {
        message._session = data.session;
      }
      if (data.data_error != null) {
        message._data_error = data.data_error;
      }
      if (data.extra_error != null) {
        message._extra_error = data.extra_error;
      }
      request.post(gelf_config.url).ca(gelf_config.ca).cert(gelf_config.cert).key(gelf_config.key).send(message).end(function(err, res) {
        if (err || !res.ok) {
          return debug('Error', err);
        }
      });
    };
    log_if = function(data) {
      if (data.logging) {
        return log.data;
      }
    };
    w.on('dev', log);
    w.on('ops', log);
    w.on('csr', log_if);
  };

}).call(this);
