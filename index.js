// Generated by CoffeeScript 1.12.7
(function() {
  var Debug, EventEmitter, Now, __debug, default_host, dev_logger, events, logger, os, process_logger, ref, seem, util, w,
    slice = [].slice;

  Debug = require('debug');

  __debug = Debug('tangible');

  util = require('util');

  seem = require('seem');

  EventEmitter = require('events');

  w = new EventEmitter();

  events = ['dev', 'ops', 'csr'];

  os = require('os');

  default_host = (ref = process.env.CUDDLY_HOST) != null ? ref : os.hostname();

  dev_logger = process.env.NODE_ENV !== 'production';

  if (process.env.DEV_LOGGER === 'true') {
    dev_logger = true;
  }

  if (process.env.DEV_LOGGER === 'false') {
    dev_logger = false;
  }

  Now = function() {
    return new Date().toJSON();
  };

  module.exports = logger = function(default_name, suffix) {
    var debug, hand, heal, make_debug, session;
    session = this.session;
    make_debug = (function(_this) {
      return function(e) {
        var _debug, full_name, local_name;
        local_name = default_name;
        full_name = local_name != null ? local_name : '(no name)';
        if (suffix != null) {
          full_name += ":" + suffix;
        }
        _debug = Debug(full_name + ":" + e);
        return function() {
          var arg, args, data, error, extra, host, logging, message, now, ref1, ref2, session_logger, text;
          text = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          arg = args[0], extra = 2 <= args.length ? slice.call(args, 1) : [];
          if (_this.session != null) {
            session = _this.session;
          }
          now = Now();
          host = (ref1 = session != null ? session.logger_host : void 0) != null ? ref1 : default_host;
          session_logger = session != null ? session.dev_logger : void 0;
          if (default_name == null) {
            if (local_name !== _this.__middleware_name) {
              local_name = _this.__middleware_name;
              full_name = local_name != null ? local_name : '(no name)';
              if (suffix != null) {
                full_name += ":" + suffix;
              }
              _debug = Debug(full_name + ":" + e);
            }
          }
          logging = dev_logger || session_logger;
          data = {
            stamp: now,
            now: Date.now(),
            host: host,
            session: (ref2 = session != null ? session._id : void 0) != null ? ref2 : null,
            reference: session != null ? session.reference : void 0,
            application: default_name != null ? default_name : local_name,
            method: suffix,
            event: e,
            msg: text,
            logging: logging
          };
          if (arg != null) {
            try {
              JSON.stringify(arg);
              data.data = arg;
            } catch (error1) {
              error = error1;
              data.data_error = true;
              data.data = util.inspect(arg);
            }
          }
          if (extra.length > 0) {
            try {
              JSON.stringify(extra);
              data.extra = extra;
            } catch (error1) {
              error = error1;
              data.extra_error = true;
              data.extra = util.inspect(extra);
            }
          }
          w.emit(e, data);
          if (logging) {
            message = now + " " + host + " " + text;
            _debug.apply(null, [message].concat(slice.call(args)));
          }
        };
      };
    })(this);
    debug = make_debug('trace');
    events.forEach((function(_this) {
      return function(e) {
        return debug[e] = make_debug(e);
      };
    })(this));
    debug.inspect = util.inspect;
    debug.error = function(msg, error) {
      var ref1;
      return debug.dev(msg + ": " + ((ref1 = error.stack) != null ? ref1 : debug.inspect(error)));
    };
    debug["catch"] = function(msg) {
      return function(error) {
        return debug.error(msg, error);
      };
    };
    heal = function(p) {
      return p["catch"](debug["catch"]('Catched'));
    };
    hand = function(f) {
      var F;
      F = seem(f);
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return heal(F.apply(null, args));
      };
    };
    debug.heal = heal;
    debug.hand = hand;
    debug.debug = debug;
    debug.events = w;
    return debug;
  };

  process_logger = logger('process');

  process.on('uncaughtException', function(error) {
    process_logger.error('uncaughtException', error);
    throw error;
  });

  process.on('unhandledRejection', function(reason, p) {
    return process_logger.error("unhandledRejection on " + (util.inspect(p)), reason);
  });

  logger.enable = Debug.enable;

  logger.set_dev_logger = function(value) {
    return dev_logger = value;
  };

  logger.default_host = default_host;

  logger.use = function(plugin) {
    plugin(w, logger);
    return logger;
  };

}).call(this);
